(* camlp5r *)
(* pp_MLast.ml,v *)

declare
  value show_longid _ = "<longid>";
  value pp_longid pps _ = Fmt.(pf pps "<longid>");
  value show_longid_lident _ = "<longid_lident>";
  value pp_longid_lident pps _ = Fmt.(pf pps "<longid_lident>");
  value show_ctyp _ = "<ctyp>";
  value pp_ctyp pps _ = Fmt.(pf pps "<ctyp>");
  value show_expr _ = "<expr>";
  value pp_expr pps _ = Fmt.(pf pps "<expr>");
  value show_patt _ = "<patt>";
  value pp_patt pps _ = Fmt.(pf pps "<patt>");
  value show_loc _ = "<loc>";
  value pp_loc pps _ = Fmt.(pf pps "<loc>");
  value show_type_var _ = "<type_var>";
  value pp_type_var pps _ = Fmt.(pf pps "<type_var>");
  value show_longid _ = "<longid>";
  value pp_longid pps _ = Fmt.(pf pps "<longid>");
  value show_ctyp _ = "<ctyp>";
  value pp_ctyp pps _ = Fmt.(pf pps "<ctyp>");
  value show_poly_variant _ = "<poly_variant>";
  value pp_poly_variant pps _ = Fmt.(pf pps "<poly_variant>");
  value show_patt _ = "<patt>";
  value pp_patt pps _ = Fmt.(pf pps "<patt>");
  value show_expr _ = "<expr>";
  value pp_expr pps _ = Fmt.(pf pps "<expr>");
  value show_case_branch _ = "<case_branch>";
  value pp_case_branch pps _ = Fmt.(pf pps "<case_branch>");
  value show_module_type _ = "<module_type>";
  value pp_module_type pps _ = Fmt.(pf pps "<module_type>");
  value show_functor_parameter _ = "<functor_parameter>";
  value pp_functor_parameter pps _ = Fmt.(pf pps "<functor_parameter>");
  value show_sig_item _ = "<sig_item>";
  value pp_sig_item pps _ = Fmt.(pf pps "<sig_item>");
  value show_with_constr _ = "<with_constr>";
  value pp_with_constr pps _ = Fmt.(pf pps "<with_constr>");
  value show_module_expr _ = "<module_expr>";
  value pp_module_expr pps _ = Fmt.(pf pps "<module_expr>");
  value show_str_item _ = "<str_item>";
  value pp_str_item pps _ = Fmt.(pf pps "<str_item>");
  value show_type_decl _ = "<type_decl>";
  value pp_type_decl pps _ = Fmt.(pf pps "<type_decl>");
  value show_generic_constructor _ = "<generic_constructor>";
  value pp_generic_constructor pps _ = Fmt.(pf pps "<generic_constructor>");
  value show_extension_constructor _ = "<extension_constructor>";
  value pp_extension_constructor pps _ =
    Fmt.(pf pps "<extension_constructor>")
  ;
  value show_type_extension _ = "<type_extension>";
  value pp_type_extension pps _ = Fmt.(pf pps "<type_extension>");
  value show_class_type _ = "<class_type>";
  value pp_class_type pps _ = Fmt.(pf pps "<class_type>");
  value show_class_sig_item _ = "<class_sig_item>";
  value pp_class_sig_item pps _ = Fmt.(pf pps "<class_sig_item>");
  value show_class_expr _ = "<class_expr>";
  value pp_class_expr pps _ = Fmt.(pf pps "<class_expr>");
  value show_class_str_item _ = "<class_str_item>";
  value pp_class_str_item pps _ = Fmt.(pf pps "<class_str_item>");
  value show_longid_lident _ = "<longid_lident>";
  value pp_longid_lident pps _ = Fmt.(pf pps "<longid_lident>");
  value show_payload _ = "<payload>";
  value pp_payload pps _ = Fmt.(pf pps "<payload>");
  value show_attribute_body _ = "<attribute_body>";
  value pp_attribute_body pps _ = Fmt.(pf pps "<attribute_body>");
  value show_attribute _ = "<attribute>";
  value pp_attribute pps _ = Fmt.(pf pps "<attribute>");
  value show_attributes_no_anti _ = "<attributes_no_anti>";
  value pp_attributes_no_anti pps _ = Fmt.(pf pps "<attributes_no_anti>");
  value show_attributes _ = "<attributes>";
  value pp_attributes pps _ = Fmt.(pf pps "<attributes>");
end;

Pp_debug.Pp_MLast.ref_show_longid.val := show_longid;
Pp_debug.Pp_MLast.ref_show_longid_lident.val := show_longid_lident;
Pp_debug.Pp_MLast.ref_show_ctyp.val := show_ctyp;
Pp_debug.Pp_MLast.ref_show_expr.val := show_expr;
Pp_debug.Pp_MLast.ref_show_patt.val := show_patt;
Pp_debug.Pp_MLast.ref_show_loc.val := show_loc;
Pp_debug.Pp_MLast.ref_show_type_var.val := show_type_var;
Pp_debug.Pp_MLast.ref_show_longid.val := show_longid;
Pp_debug.Pp_MLast.ref_show_ctyp.val := show_ctyp;
Pp_debug.Pp_MLast.ref_show_poly_variant.val := show_poly_variant;
Pp_debug.Pp_MLast.ref_show_patt.val := show_patt;
Pp_debug.Pp_MLast.ref_show_expr.val := show_expr;
Pp_debug.Pp_MLast.ref_show_case_branch.val := show_case_branch;
Pp_debug.Pp_MLast.ref_show_module_type.val := show_module_type;
Pp_debug.Pp_MLast.ref_show_functor_parameter.val := show_functor_parameter;
Pp_debug.Pp_MLast.ref_show_sig_item.val := show_sig_item;
Pp_debug.Pp_MLast.ref_show_with_constr.val := show_with_constr;
Pp_debug.Pp_MLast.ref_show_module_expr.val := show_module_expr;
Pp_debug.Pp_MLast.ref_show_str_item.val := show_str_item;
Pp_debug.Pp_MLast.ref_show_type_decl.val := show_type_decl;
Pp_debug.Pp_MLast.ref_show_generic_constructor.val := show_generic_constructor;
Pp_debug.Pp_MLast.ref_show_extension_constructor.val :=
  show_extension_constructor;
Pp_debug.Pp_MLast.ref_show_type_extension.val := show_type_extension;
Pp_debug.Pp_MLast.ref_show_class_type.val := show_class_type;
Pp_debug.Pp_MLast.ref_show_class_sig_item.val := show_class_sig_item;
Pp_debug.Pp_MLast.ref_show_class_expr.val := show_class_expr;
Pp_debug.Pp_MLast.ref_show_class_str_item.val := show_class_str_item;
Pp_debug.Pp_MLast.ref_show_longid_lident.val := show_longid_lident;
Pp_debug.Pp_MLast.ref_show_payload.val := show_payload;
Pp_debug.Pp_MLast.ref_show_attribute_body.val := show_attribute_body;
Pp_debug.Pp_MLast.ref_show_attribute.val := show_attribute;
Pp_debug.Pp_MLast.ref_show_attributes_no_anti.val := show_attributes_no_anti;
Pp_debug.Pp_MLast.ref_show_attributes.val := show_attributes;
